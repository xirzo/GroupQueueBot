import telebot, requests
from telebot import types
import urllib.parse

from dotenv import dotenv_values

CONFIG = dotenv_values(".env")
TOKEN = CONFIG['TOKEN']
BACKEND_URL = CONFIG['BACKEND_URL']

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def show_menu(message):
    show_lists = types.InlineKeyboardButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–∫–∏', callback_data='show_lists')
    group = types.InlineKeyboardButton('üë• –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='show_all_users')
    add_list = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data='add_list')
    remove_list = types.InlineKeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data='remove_list')

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(show_lists)
    keyboard.add(group)
    keyboard.add(add_list)
    keyboard.add(remove_list)

    bot.send_message(
        message.chat.id, 
        'üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ *Group Queue Bot!* –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É', 
        reply_markup=keyboard, 
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_router(callback):
    if callback.data == 'show_lists':
        handle_show_lists(callback)

    elif callback.data == 'show_all_users':
        handle_show_all_users(callback)
    
    elif callback.data == 'add_list':
        handle_add_list(callback)

    elif callback.data == 'remove_list':
        handle_remove_list(callback)
    
    elif callback.data == 'back_to_main':
        handle_back_to_main(callback)

    elif callback.data == 'back_to_show_lists':
        handle_back_to_show_lists(callback)

    elif callback.data == 'back_to_remove_lists':
        handle_back_to_remove_lists(callback)
    
    elif callback.data.startswith('show_list_'):
        handle_show_list_details(callback)

    elif callback.data.startswith('remove_list_'):
        handle_remove_list_details(callback)


def handle_show_lists(callback):
    try:
        resp = requests.get(f'{BACKEND_URL}/get_all_lists')
        resp.raise_for_status()
        
        if not resp.text or resp.text.strip() == '':
            text = 'üì≠ –°–ø–∏—Å–∫–æ–≤ –Ω–µ—Ç'
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            keyboard.add(back_button)
            bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
            return
            
        lists = resp.json()
        
        if not lists:
            text = 'üì≠ –°–ø–∏—Å–∫–æ–≤ –Ω–µ—Ç'
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            keyboard.add(back_button)
            bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
            return
            
        text = 'üìã –°–ø–∏—Å–∫–∏:\n\n'
        
        for list_item in lists:
            decoded_name = urllib.parse.unquote(list_item['name'])
            text += f"{list_item['list_id']}. {decoded_name}\n"

        keyboard = types.InlineKeyboardMarkup()
        
        for list_item in lists:
            decoded_name = urllib.parse.unquote(list_item['name'])
            show_list_button = types.InlineKeyboardButton(
                f"üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å {decoded_name}", 
                callback_data=f"show_list_{list_item['list_id']}"
            )
            keyboard.add(show_list_button)
        
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.add(back_button)

        bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤: {str(e)}"
        
        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.add(back_button)
        bot.send_message(callback.message.chat.id, "üì≠ –°–ø–∏—Å–∫–æ–≤ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.", reply_markup=keyboard)

def handle_show_all_users(callback):
    try:
        resp = requests.get(f'{BACKEND_URL}/get_all_users')
        resp.raise_for_status()
        
        if not resp.text or resp.text.strip() == '':
            text = 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç'
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            keyboard.add(back_button)
            bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
            return
            
        lists = resp.json()
        
        if not lists:
            text = 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –Ω–µ—Ç'
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            keyboard.add(back_button)
            bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
            return
            
        text = 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n'
        
        counter = 1

        for user in lists:
            text += f"{str(counter)}. {user['surname']} {user['first_name']} {user['second_name']}\n"
            counter += 1

        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.add(back_button)

        bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}"
        
        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.add(back_button)
        bot.send_message(callback.message.chat.id, "üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–∏.", reply_markup=keyboard)

def handle_add_list(callback):
    chat_id = callback.message.chat.id
    user_states[chat_id] = 'adding_list'
    bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:")


def handle_remove_list(callback):
    try:
        resp = requests.get(f'{BACKEND_URL}/get_all_lists')
        resp.raise_for_status()
        
        if not resp.text or resp.text.strip() == '':
            text = 'üì≠ –ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.'
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            keyboard.add(back_button)
            bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
            return
            
        lists = resp.json()
        
        if not lists:
            text = 'üì≠ –ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
            keyboard = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            keyboard.add(back_button)
            bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
            return
            
        keyboard = types.InlineKeyboardMarkup()
        
        for list_item in lists:
            decoded_name = urllib.parse.unquote(list_item['name'])
            remove_list_button = types.InlineKeyboardButton(
                f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {decoded_name}", 
                callback_data=f"remove_list_{list_item['list_id']}"
            )
            keyboard.add(remove_list_button)
        
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.add(back_button)

        text = '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'

        bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤: {str(e)}"
        print(error_message)  
        
        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        keyboard.add(back_button)
        
        bot.send_message(callback.message.chat.id, "üì≠ –ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏–∏.", reply_markup=keyboard)

def handle_back_to_main(callback):
    show_menu(callback.message)

def handle_back_to_show_lists(callback):
    handle_show_lists(callback)

def handle_back_to_remove_lists(callback):
    handle_remove_list(callback)

def handle_show_list_details(callback):
    try:
        list_id = callback.data.replace('show_list_', '')
        
        list_user_resp = requests.get(f'{BACKEND_URL}/get_list_users/{list_id}')
        list_user_resp.raise_for_status()
        list_users = list_user_resp.json()

        users_resp = requests.get(f'{BACKEND_URL}/get_users/{list_id}')
        users_resp.raise_for_status()
        users = users_resp.json()

        text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–ø–∏—Å–∫–∞:\n\n"
        counter = 1

        user_dict = {str(user['user_id']): user for user in users}
        
        sorted_list_users = sorted(list_users, key=lambda x: x.get('list_user_order', counter))

        for list_user in sorted_list_users:
            user_id = str(list_user['user_id'])
            if user_id in user_dict:
                user = user_dict[user_id]
                text += f"{counter}. {user['surname']} {user['first_name']} {user.get('second_name', '')}\n"
                counter += 1

        if counter == 1:
            text += "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."

        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_show_lists")
        keyboard.add(back_button)

        bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
    except Exception as e:
        bot.send_message(callback.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞: {e}")


def handle_remove_list_details(callback):
    try:
        list_id = callback.data.replace('remove_list_', '')
        
        resp = requests.delete(f'{BACKEND_URL}/remove_list/{list_id}')
        resp.raise_for_status()

        text = f'‚úÖ –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!'

        keyboard = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_remove_lists")
        keyboard.add(back_button)

        bot.send_message(callback.message.chat.id, text, reply_markup=keyboard)
    except Exception as e:
        bot.send_message(callback.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")

user_states = {}

@bot.message_handler(func=lambda message: True)
def handle_text_input(message):
    chat_id = message.chat.id
    
    current_state = user_states.get(chat_id)
    
    if current_state == 'adding_list':
        list_name = message.text.strip()
        
        if not list_name:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            response = requests.post(f'{BACKEND_URL}/add_list/{list_name}')
            response.raise_for_status()
            
            bot.send_message(chat_id, f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            
            user_states.pop(chat_id, None)
            
            show_menu(message)
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
            user_states.pop(chat_id, None)
            show_menu(message)
    else:
        bot.send_message(chat_id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")
        show_menu(message)

if __name__ == "__main__":
    bot.infinity_polling()
